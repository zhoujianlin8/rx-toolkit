#!/usr/bin/env node
var program = require('ginit').commander;
var Tasks = require('../index');
var RT = require('../lib/rt');
var spawn = RT.spawn;
var util = require('util');
var packageJSON = require(__dirname+'/../package.json');
var helpInfo = {
  'init': ['初始化项目目录。', 'Init project directory'],
  'p':['创建页面\n 使用方法:\n `rt page <page名称> [类型]'],
  'c': ['创建component\n 使用方法:\n `rt component <component名称>', 'component related'],
  'data': ['创建data\n 使用方法:\n `rt data <data名称> [数据类型]`', 'data related'],
  'build': ['构建项目。', 'Build Project.'],
  'start': ['启动项目调试服务器', 'Start up project debug server'],
  '--port': ['端口号','server port'],  
};
var lang = process.env.LANG || 'zh';
lang = (lang.indexOf('zh') === 0) ? 0 : 1;

program
  .version(packageJSON.version)
  .option('-p, --port <port>', helpInfo['--port'][lang])
program
  .command('init [template]')
  .description(helpInfo['init'][lang])
  .action(function (template) {
    Tasks.init(template);
  });

program
  .command('c <name> [routeName]')
  .description(helpInfo['c'][lang])
  .action(function (name,roucte) {
    Tasks.c(name,route);
  });

program
  .command('p <name> [type]')
  .description(helpInfo['r'][lang])
  .action(function (name, type) {
    Tasks.p(name,type);
  });
program
  .command('data <name> [type]')
  .description(helpInfo['data'][lang])
  .action(function (name, type) {
    Tasks.data(name,type);
  });
program
  .command('build')
  .description(helpInfo['build'][lang])
  .action(function () {
    Tasks.build({
      tasks: 'build',
      buildTo: program.buildTo,
      args: getArgs(this.parent.args)
    });
    // process.exit(0);
  });


program
  .command('start ')
  .description(helpInfo['start'][lang])
  .action(function () {
    var args = getArgs(this.parent.args);
    Tasks.start({
      port: program.port,
      args: args
    });
  });
program
  .command('*')
  .description('deploy the given env')
  .action(function (env) {
     // Tasks.other(process.argv)
      execSciprt()()
  });
program.parse(process.argv);


function execScript (cli,cb) {
    var config = RT.config;
    var scripts = Object.assgin(Tasks,config.scripts || {});
    if(cli.indexOf('pre') !== 0 || cli.indexOf('post') !== 0){
        return execCli('pre'+cli,function (err) {
            execCli(cli,function (err) {
                execCli('post'+cli,function (err) {
                    cb();
                })
            })
        })
    }else{
        execCli(cli);
    }
    function execCli(execCli,callback) {
        var exec = scripts[execCli];
        //命令行
        if(util.isString(exec)){
            spawn(exec)
        }else if(exec === true){
            if(config[execCli] && util.isFunction(config[cli])){
                config[execCli](RT,callback);
            }else{
                console.log('config['+cli+']'+'不存在')
            }
        }else if(util.isFunction(exec)){
            exec(RT,callback);
        }
    }
}

function getArgs(arr) {
  var newArr = [];
  arr = arr || [];
  arr.pop();
  arr.forEach(function (item) {
     item && newArr.push(item)
  });
  return newArr;
}
